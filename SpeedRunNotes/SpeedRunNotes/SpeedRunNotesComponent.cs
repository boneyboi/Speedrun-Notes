using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Windows.Forms;
using System.Xml;
using LiveSplit.Model;
using LiveSplit.Model.Input;
using LiveSplit.SpeedRunNotes;
using SpeedRunNotes;
using LiveSplit.UI.Components;
namespace LiveSplit.UI.Components
{
    public class SpeedRunNotesComponent : IComponent
    {

        //the settings, display, and editor are all present here becase this class and those classes all use parts of eachother in order to work
        //EX: the wsettings class uses editor attributes in order to save the notes taken by the user
        //so I have to declare them here in order for them to 1. display, and 2. to include them in the arguments of one another
        DisplaySettings settings;
        public static Display display;
        public Editor editor;

        //constructor for this class
        //this is the main constructor of the entire component and needs the interface of IComponent in order to be recognized by livesplit
        public SpeedRunNotesComponent(LiveSplitState state)
        {

            //implementation of the editor, settings, and display
            this.editor = new Editor(state);
            display = new Display(state, this.editor);
            //need to pas the livesplit state to the new objects in order for them to handle segments and splits
            settings = new DisplaySettings(state, this.editor);

            //implementaion of the component's width and height
            //since I want the display to be in a seperate window, I made a seperate form and set what is added on to livesplit to be virtually nothing
            HorizontalWidth = 0;
            VerticalHeight = 0;
        }

        //attributes
        public string ComponentName => "Speedrun Notes";


        // all of these are attributes for the display generated by livesplit
        public float HorizontalWidth
        {
            //"get; set;" seems like just an easy way to get around having to implement a value here
            ////if you did want to implement a constant value do only get{return c;}
            ////otherwise just stick with this because it allows you to set and get the value
            get; set;
        }

        public float MinimumHeight
        {
            //set it here for a constant,
            //set in the constructor for a varying number
            get; set;
        }

        public float VerticalHeight
        {
            get; set;
        }

        public float MinimumWidth
        {
            get; set;
        }

        public float PaddingTop
        {
            get; set;
        }

        public float PaddingBottom
        {
            get; set;
        }

        public float PaddingLeft
        {
            get; set;
        }

        public float PaddingRight
        {
            get; set;
        }



        //IDictionary is a dictionary of string Action pairs
        public IDictionary<string, Action> ContextMenuControls
        {
            get; set;
        }


        ///
        /// horizontal and vertical refer to the layout modes
        /// for my guide component, they should both be the same

        public void DrawHorizontal(Graphics g, LiveSplitState state, float height, Region clipRegion)
        {
            //makes the form created by the display class visible
            display.Show();
        }
        public void DrawVertical(Graphics g, LiveSplitState state, float width, Region clipRegion)
        {
            DrawHorizontal(g, state, width, clipRegion);
        }



        
        //these methods get the settings from my component and save them to the layout file
        public XmlNode GetSettings(XmlDocument document)
        {
            return settings.GetSettings(document);
        }
        public Control GetSettingsControl(LayoutMode mode)
        {
            //since CSettings is a control type object from the settings.cs file, I can jsut return that.
            return settings;
        }

        
        //this method sets the variables of my component that I saved to what the file that is loaded says they should be set to
        public void SetSettings(XmlNode settings)
        {
            this.settings.SetSettings(settings);
        }


        //no need for this update since I have my own in the display class
        public void Update(IInvalidator invalidator, LiveSplitState state, float width, float height, LayoutMode mode)
        {

        }
        

        //I only use this if I am creating things that I am able to get rid of or reset at any point
        #region IDisposable Support
        private bool disposedValue = false; // To detect redundant calls

        protected virtual void Dispose(bool disposing)
        {
            if (!disposedValue)
            {
                if (disposing)
                {
                    
                    // TODO: dispose managed state (managed objects).
                }

                //closes the form when the component is deleted
                display.Close();
                
                
                // TODO: free unmanaged resources (unmanaged objects) and override a finalizer below.
                // TODO: set large fields to null.

                disposedValue = true;
            }
        }

        // TODO: override a finalizer only if Dispose(bool disposing) above has code to free unmanaged resources.
        // ~Ctest1Component() {
        //   // Do not change this code. Put cleanup code in Dispose(bool disposing) above.
        //   Dispose(false);
        // }

        // This code added to correctly implement the disposable pattern.
        public void Dispose()
        {
            // Do not change this code. Put cleanup code in Dispose(bool disposing) above.
            Dispose(true);
            // TODO: uncomment the following line if the finalizer is overridden above.
            // GC.SuppressFinalize(this);
        }

        #endregion
    }
}
